****************************************
Описание содержания и структуры `engine`
****************************************

Структурно engine состоит из следующих js-скриптов и каталогов:

* `app.js` - глобальное объявление и первоначальная инициализация приложения, всех его базовых сущностей, событий, клиентских настроек по умолчанию, а также методов определения и загрузки нужного шаблона интерфейса.
* `application.js` - скрипт, описывающий сущность BaseApplication - стороннее подключаемое приложение.
* `data.js` - сущность BaseData, набор функций, производящих общение с backend-частью платформы.
* `device.js` - объявление и определение класса Device, то есть методов работы с API устройства просмотра. Данный скрипт является родительским для всех остальных `device.js`, описывающих работу с каждым конкретным устройством, а также заглушкой для запуска портала в браузере - его методы вызываются в случае, если устройство просмотра не было определено и по умолчанию было задано как 'mag'. При попытке воспроизведения потока в браузере пользователь увидит эмулятор плеера, в остальном работа портала не будет отличаться от обычной.
* `display.js` - сущность BaseDisplay, представляет собой набор переменных и методов для задания и определения конфигураций дисплея, а также методы по работе с нажатиями клавиш и управления экранами (сущностями, наследуемыми от BaseScreen).
* `helper.js` - описание класса Helper, содержащего вспомогательные функции для работы с DOM-элементами, массивами, строками и т.д.
* `keytable.js` - сущность BaseKeyTable, класс для работы с таблицами кодов клавиш каждого устройства.
* `lang.js` - сущность BaseLang, позволяющая менять языковую локализацию приложения каждого шаблона.
* `logger.js` - класс Logger для работы с самописной консолью (предназначена только для debug-режима, активируется в файле client.js или с помощью *магической* комбинации клавиш, по умолчанию отключена).
* `menu.js` - сущность BaseMenu, описывающая поведение различных списков в приложении, а также предоставляющая широкий набор методов для работы с ними.
* `player.js` - сущность BasePlayer, является родительской для плеера внутри каждого шаблона, фактически описывает событийный аппарат плеера.
* `screen.js` - сущность BaseScreen, описывает экран приложения - структурную единицу любого шаблона.
* `settings.js` - сущность BaseSettings, содержит константы и методы для  работы с пользовательскими настройками приложения (язык, время, буфферизация и т.д.), которые в дальнейшем могут переопределяться в зависимости от шаблона. Набор настроек также кастомизируем с помощью файла client.js.
* каталог `backends` - содержит сторонние data.js, то есть наборы методов для работы со сторонними backend-ами.
* каталог `device` - содержит файлы device.js для каждого устройства, на данный момент их уже 14.
* каталог `thirdparty` - содержит сторонние библиотеки, на данный момент только json2.js.

Подробный обзор и описание основных сущностей и скриптов `engine`
-----------------------------------------------------------------

Как было описано выше, `engine` представляет собой ряд сущностей, составляющих костяк IPTV/OTT-сервиса. Все они, взаимодействуя друг с другом на протяжении сессии, образуют жизненный цикл приложения. Практически все данные, используемые сервисом - динамические, то есть они запрашиваются с сервера или высчитываются при каждом новом запуске (исключением, пожалуй, являются только данные авторизации и пользовательские настройки - они записываются в куки устройства).
Ниже представлена примерная схема, по которой происходит процесс инициализации приложения, определения шаблона, типа устройства просмотра и подключение и подгрузка нужных скриптов (другими словами, всё, что происходит до запуска init.js каждого шаблона).

.. image:: img/index-redirect.png

app.js
------

**Поля объекта App**

* `middlewareName` - имя серверной части сервиса, на данный момент задано по дефолту, как "Microimpuls IPTV/OTT Middleware (c) Microimpuls LLC, http://www.microimpuls.com"
* `device` - устройство просмотра, в дальнейшем, уже внутри шаблона, этому полю будет присвоен объект Device.
* `display` - поле, представляющее собой объект класса BaseDisplay.
* `settings` - поле, представляющее собой объект класса Settings("наследуется" от BaseSettings), который в каждом шаблоне свой.
* `data` - поле, представляющее собой объект класса BaseData.
* `player` - поле, представляющее собой объект класса Player("наследуется" от BasePlayer), который в каждом шаблоне свой.
* `playerScreen, loginScreen, mainmenuScreen, tvChannelsScreen, epgScreen, settingsScreen, infoScreen, videoCatalogScreen, videoScreen` - объявление основных экранов сервиса, все остальные экраны для каждого шаблона объявляются и определяются внутри шаблонов.
* `clientSettings` - поле клиентских настроек, весь перечень возможных полей этого объекта представлен в app.js, там же они инициализированы дефолтными значениями и там же происходит присваивание этому полю объекта CLIENT_SETTINGS (из файла client.js).

**Поля clientSettings:**

* `client_id` - *int* - идентификатор клиента в Microimpuls Middleware, для других платформ задаётся 0.
* `api_key` - *string* - ключ доступа к Microimpuls Middleware, для других платформ задаётся пустой строкой.
* `api_url` - *string* - адрес Middleware, по которому будет происходить доступ к её API.
* `template_name` - *string* - системное имя шаблона ('classic', 'cti', 'focus', 'impuls', 'iridium', 'orbit').
* `template_size` - *object* - размер дисплея шаблона (1280х720, 1920х1080 и т.д.).
* `settings_filename` - *string* - название файла, где хранятся куки.
* `site_url` - *string* - адрес сайта сервиса.
* `demo_mode` - *bool* -
* `debug` - *bool* -  флаг, отображающий консоль разработчика.
* `signup_auto_activation_period` - *int* -
* `show_welcome_message` - *bool* -
* `welcome_message` - *string* -
* `registration_available` - *bool* -
* `template_styles` - *object* -
* `settings_menu_custom_items` - *list* -
* `auth_mode` - *string* - режимы авторизации ('password' - по паролю и номеру абонемента, 'abonement' - только по номеру абонемента, 'device_uid' - по устройству).
* `play_record_continuously` - *bool* -
* `server_rewind_mode` - *bool* -
* `use_template_default_resolution` - *bool* -
* `show_disconnect_message` - *bool* -
* `samsung_guidelines_compatibility_mode` - *bool* - флаг, при включении которого логика переходов и нажатий подстраивается под политику Samsung.
* `auto_launch_last_viewed_channel` - *bool* - флаг, отвечающий за автозапуск последнего просмотренного канала при включении приложения.
* `programs_limit_for_channel_list_request` - *int* -
* `default_timezone` - *int* - часовой пояс по умолчанию.
* `default_buffersize` - *int* - размер буферизации по умолчанию (структуру с перечислением значений можно найти в settings.js).
* `default_lang` - *int* - язык приложения по умолчанию (структуру с перечислением значений можно найти в settings.js)

**Методы**

* `detectTemplate()` -
* `reloadToTemplate(templateName)` -
* `detectAndReloadTemplate(templateName, force)`
* `setAccountTemplate(templateName)`
* `resetAccountTemplate()`
* `fireEvent(eventType, eventArgument)`

application.js
--------------

data.js
-------

device.js
---------

display.js
----------

helper.js
---------

keytable.js
-----------

lang.js
-------

logger.js
---------

menu.js
-------

player.js
---------

screen.js
---------

settings.js
-----------
